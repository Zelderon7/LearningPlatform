@model WebApplication1.Models.VMs.CodingIDETemplateVM

@{
    Layout = null;
    ViewData["Title"] = Model.Template.Name;
	string[] files = Model.Files
        .Select(f => f.FullName)
        .ToArray();

    bool isValidSolution = (bool)(ViewData["IsValidSolution"] ?? false);
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@Model.Template.Name</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.33.0/min/vs/editor.main.min.css">
    <style>
        body {
            background-color: #1e1e1e;
            color: #d4d4d4;
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            display: flex;
            flex-direction: column;
            height: 100vh;
        }

        .container {
            display: flex;
            flex: 1;
            padding: 20px;
            gap: 20px;
        }

        .left-panel {
            flex: 1;
            max-width: 30%;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
        }

        .right-panel {
            flex: 2;
            display: flex;
            flex-direction: column;
        }

        .editor-container {
            flex: 1;
            border: 1px solid #444;
            margin-bottom: 20px;
        }

        .file-tabs {
            display: flex;
            margin-bottom: 10px;
        }

        .file-tab {
            padding: 10px;
            background-color: #2d2d2d;
            color: #d4d4d4;
            cursor: pointer;
            margin-right: 5px;
            border: 1px solid #444;
        }

            .file-tab.active {
                background-color: #1e1e1e;
                border-bottom: 1px solid #1e1e1e;
            }

        .button-container {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }

            .button-container button, .button {
                padding: 10px 20px;
                background-color: #007bff;
                color: white;
                border: none;
                cursor: pointer;
                border-radius: 5px;
                text-decoration: none;
            }

                .button-container button:hover {
                    background-color: #0056b3;
                }

            .button-danger{
                font-size: smaller;
                background-color: #d75752;
            }

            .button-danger:hover{
                background-color: #ad3b37
            }


        .output-container {
            background-color: #2d2d2d;
            border: 1px solid #444;
            padding: 10px;
            color: #d4d4d4;
            margin-top: 20px;
            height: 100px;
            overflow-y: auto;
        }


        .chat-container {
            width: auto;
            background-color: #1e1e1e;
            border-radius: 10px;
            overflow-x: clip;
            overflow-y: scroll;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
            margin-top: auto;
        }

        .chat-header {
            background-color: #333;
            padding: 15px;
            text-align: center;
            font-size: 18px;
            font-weight: bold;
            border-bottom: 1px solid #444;
        }

        .chat-body {
            height: 300px;
            overflow-y: auto;
            padding: 10px;
            background-color: #252525;
        }

        .chat-footer {
            display: flex;
            border-top: 1px solid #444;
            padding: 10px;
            background-color: #1e1e1e;
        }

        #chatInput {
            flex: 1;
            padding: 10px;
            background-color: #333;
            border: none;
            border-radius: 5px;
            color: #fff;
            outline: none;
        }

        #sendButton {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 10px 15px;
            margin-left: 10px;
            border-radius: 5px;
            cursor: pointer;
            transition: background 0.3s;
        }

            #sendButton:hover {
                background-color: #0056b3;
            }

    </style>
</head>
<body>
    <div class="container">
        <!-- Left Panel: Title and Description -->
        <div class="left-panel">
            <h1>@Model.Template.Name</h1>
            <div class="chat-container" id="chatContainer">
                <div class="chat-header">Чат</div>
                <div class="chat-body" id="chatBody"></div>
                <div class="chat-footer">
                    <input type="text" id="chatInput" placeholder="Въведи съобщение..." />
                    <button id="sendButton">Изпрати</button>
                </div>
            </div>
        </div>

        <!-- Right Panel: Editor and Buttons -->
        <div class="right-panel">
            <!-- File Tabs -->
            <div class="file-tabs" id="fileTabs">
                @for (int i = 0; i < files.Length; i++)
                {
                    <div class="file-tab @(i == 0 ? "active" : "")" data-index="@i">@files[i]</div>
                }
                @if(User.IsInRole("TEACHER") || User.IsInRole("ADMIN")){
                    <a class="file-tab" id="newFile" asp-action="TemplateNewFile" asp-route-templateId="@Model.Template.Id">+</a>
                }
            </div>

            <!-- Monaco Editor -->
            <div class="editor-container" id="editorContainer"></div>

            <!-- Buttons -->
            <div class="button-container">
                <form asp-action="RunCode" method="post">
                    <!-- Hidden fields for CodingTask properties -->
                    <input type="hidden" asp-for="Template.Id" />
                    <input type="hidden" asp-for="Template.Name" />
                    <input type="hidden" asp-for="Template.Language" />

                    <!-- Handling Files -->
                    @if (Model.Files != null)
                    {
                        @for (int i = 0; i < Model.Files.Count(); i++)
                        {
                            <input type="hidden" asp-for="Files[i]" />
                        }
                    }

                    <button type="submit" id="submitButton">Run Code</button>
                </form>

                @if(isValidSolution){
                    <a class="btn button btn-success" style="background-color: #43c570; margin-left: auto;">ALL Tests Passed :)</a>
                }
            </div>

            <!-- Output Area -->
            <div class="output-container" id="outputContainer">
                <p>@Model.Output</p>
                <p style="color: red;">@Model.Error</p>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.33.0/min/vs/loader.min.js"></script>
    <script>
        const editors = [];
        require.config({ paths: { 'vs': 'https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.33.0/min/vs' }});
        require(['vs/editor/editor.main'], function () {
            const fileContents = @Html.Raw(Json.Serialize(Model.Files?.Select(f => f.Data).ToArray()));
            
            const editorContainer = document.getElementById('editorContainer');
            const outputContainer = document.getElementById('outputContainer');

            function createEditor(index) {
                const editor = monaco.editor.create(editorContainer, {
                    value: fileContents[index],
                    language: 'python',
                    theme: 'vs-dark'
                });
                editors[index] = editor;
            }

            function showEditor(index) {
                editors.forEach((editor, i) => {
                    if (i === index) {
                        editorContainer.innerHTML = '';
                        editor.layout();
                        editorContainer.appendChild(editor.getDomNode());
                    }
                });
            }

            document.querySelectorAll('.file-tab').forEach((tab, index) => {
                tab.addEventListener('click', () => {
                    document.querySelectorAll('.file-tab').forEach(t => t.classList.remove('active'));
                    tab.classList.add('active');
                    if (!editors[index]) {
                        createEditor(index);
                    }
                    showEditor(index);
                });
            });

            // Initialize the first editor
            createEditor(0);

            document.getElementById("newFile").addEventListener("click", function(event) {
                event.preventDefault(); // Prevent the default navigation

                let fileName = prompt("Enter file name:");
                if (fileName) {
                    this.href = this.getAttribute("href") + "&fileName=" + encodeURIComponent(fileName);
                    window.location.href = this.href; // Navigate to the new URL with the file name
                }
            });

        });

        document.addEventListener('keydown', function (event) {
            if (event.ctrlKey && event.key === 's') {
                event.preventDefault(); // Prevent default browser save

                const activeTab = document.querySelector('.file-tab.active');
                const activeIndex = activeTab ? parseInt(activeTab.getAttribute('data-index')) : 0;
                const code = editors[activeIndex].getValue();
                const files = @Html.Raw(Json.Serialize(Model.Files)); // Correct way
                const fileId = files[activeIndex].id;

                console.log(files);
                console.log(activeIndex);
                console.log(fileId);


                // Send AJAX request to save the file
                fetch('/Coding/SaveCode', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify({ FileId: fileId, Content: code })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        console.log('File saved successfully!');
                        outputContainer.innerHTML = `<p style="color: green;">File saved successfully!</p>`;
                    } else {
                        console.error('Error saving file:', data.message);
                        outputContainer.innerHTML = `<p style="color: red;">Error saving file: ${data.message}</p>`;
                    }
                    
                    document.getElementById('submitSolutionButton')?.remove();
                })
                .catch(error => {
                    console.error('Request failed:', error);
                    outputContainer.innerHTML = `<p style="color: red;">Failed to save file.</p>`;
                });
            }
        });


    </script>
</body>
</html>